Master
------
x Base Setup
	x Repository
	x Library Template
	x Build File
x Core System
	x Event System
	x Active Regions
	x Dummy UI Element (Bang)
x Basic UI Components
	x Button
	x Toggle
	x Slider
	x Divider
	x Label
* API Refinement
	x Events (Mouse, Keyboard)
	x Class Hierarchy
	* Element Construction Pattern
	* Callback Pattern
* Advanced Features
	x Theme
	x Automatic Layout
	* Auto Connection
	* Saving State
	* Layout Adjustment
	* Drawing Performance Optimization (Redraw only when changed)
	* Multiple Layout Modes
	* Keyboard shortcuts
* More UI Elements
	* Vertical Slider
	* Radio Button
	* XY Pad
	* Text Input
	* Label Button
	* Label Toggle
	* Drop Down List
* Docs
	* Code
	* User Documentation
	* Website
	* Readme


System
------
x fix preprocessor (welcomeMessage() not working) -> works on clean & build (non-fast)
x compiler warnings: [unchecked], [rawtypes]
x Proper dist and tagging
* Logger instead of System.out
* Faster build (reuse preprocessed files/tmp)


Documentation
-------------
* use public callbacks in case something doesn't work (SecurityNanager)


Event System
------------
x List of Events
x Review Event Systems 
	x Processing
 	x OpenFrameworks
	x ofxUI
x Mouse Events
	x Support for different mouse buttons
* Keyboard Events
	* Notion of Focus for a widget


Class Hierarchy / API
---------------------
* Main Class (PUI)
	* Singleton vs. multiple instances
* Element Base Class / Widget
* Elements/Widgets
	* Handle Events from PUI
	* Data/State/Model
	* Presentation/Rendering/View
	* User Drawing
	* User Event handling
* Event/Callback Pattern
* User controlled drawing
* User Events
* Widget creation (without classes)
* api revision


API Revision
------------
x The matrix might be changed when the draw callback comes
x Widget Constructor: PUI as first Argument
x Revise public API (what should the user see)
/ should UIEvents really be public? maybe just protected
x support for labeled widgets
* widget names (e.g. for label, id, auto connect)
* how to best encapsulate base widget state (active, hover, pressed, focus, ...). who needs to see it?
* how to encapsulate special element state (slider value, ...)
* user callbacks
	* which events are defined -> documented, convention onEvent
	* callback arguments (whole object, relevant value, nothing)

* element draw override (disable standard draw)
x Generator Functions for Widgets in PUI. 
* Modular Generator function:  ui.new( "com.martinleopold.pui.widget.Bang", x, y, â€¦ );
* Widgets in own package: com.martinleopold.pui.widget
* PGraphics instead of PApplet? -> Can't use events then.


Main Class
----------
* show/hide ui
* test ui size and position
* test ui drawing independence of sketch transformations
* default settings in a file


Widgets
-------
* constructor possibilities
* widgets with labels
* labels with 3 sizes


Theme System
------------
x add more themes
/ widgets need to be able to have a different theme?


Grid System
-----------
x Default Sizes for widgets (based on grid)
x Padding based on grid


Issues
------
* OpenGL: widgedts don't render
x newRow(), newColumn() with Labels
x Labels optional for widgets


Top down
--------
* Base API
* Base Widgets (Slider, Button, Toggle, Label, Divider)
* Callbacks
* Auto Connect
* Theme System
* Grid Layout


Ways to use
-----------
* Use PUI Object
* Extending Widget yourself and adding it to PUI

? Multiple PUIs


PUI - Public API
----------------
* init
* create (and add) widgets
* theme
	* colors
	* padding
	* font
* grid
	* size

* add (externally created) widgets


Widget - Public API
-------------------
* register event handlers
* access state
* size (in grid units)
* position (in grid units or pixels)
* label
* chainable public methods

* construct with new
* custom size
* individual theme
* override drawing
* construct without PUI?


Widget - Extending
------------------
* protected vs. private stuff


Test Release
------------
x widgets with labels
x more themes
theme api (PUI)
x grid: widget dimensions, grid api (PUI)
x public api review
x docs


PUI API (now / later)
-------
x close public API
x static init
x chainability
x widget creation / generators
x remove layout debug out
x set grid, padding
x set theme


Widget API (now / later)
----------
x remove UIEvents (forces public on ui callbacks methods)

/ name
x label size
x remove label interactions
/ create widgets without PUI ?

/ slider set min/max
x label sizes


Review/Refinement
-----------------
x on normal build create dist/pUI-xxx.zip (and delete old ones)
* add credits to reza ali (visuals/theme)
javadocs
	x javadocs should only show public API
	x exclude events package
	* TWidget return type should show as actual class
	* hide inner class ProcessingEventHandler
PUI
* layout
	* how to deal with custom widget sizes and positions?
	* layout direction
	* should setting grid, font, padding have an effect on widgets created before?
* custom size
* retrieve widgets
* add default font as TTF
* remove "add" prefix from widget generators?
* theme
	* review color themes (text not legible, bg color too light
	* Theme constants in PUI object ?
	* overridable bg color

Widgets
* state as methods instead of public fields?
* connect should also work with methods (not only fields)
* callbacks for multiple method signatures (e.g. Slider and float)
* custom size
* custom position
* label position
* name (default label, auto connect, retrieval)
* widgets without PUI?
* overridable themes
* custom drawing disables vanilla drawing? (-> needs access to state)

Slider
* min/max support
* vertical slider
* show value in the UI ?

Extra Widgets
* Radio, Button
* MultiToggle, ToggleMatrix
* 2D Pad
* Graph
* (Knob)
