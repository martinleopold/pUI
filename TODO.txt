Master
------
x Base Setup
	x Repository
	x Library Template
	x Build File
x Core System
	x Event System
	x Active Regions
	x Dummy UI Element (Bang)
* Basic UI Components
	* Button
	* Toggle
	* Slider
	* Divider
	* Label
* API Refinement
	* Events (Mouse, Keyboard)
	* Class Hierarchy
	* Element Construction Pattern
	* Callback Pattern
* Advanced Features
	* Auto Connection
	* Theme
	* Automatic Layout
	* Saving State
	* Layout Adjustment
	* Drawing Performance Optimization (Redraw only when changed)
	* Multiple Layout Modes
	* Keyboard shortcuts
* More UI Elements
	* Vertical Slider
	* Radio Button
	* XY Pad
	* Text Input
	* Label Button
	* Label Toggle
	* Drop Down List
	* Moving 
* Docs
	* Code
	* User Documentation
	* Website
	* Readme


System
------
x fix preprocessor (welcomeMessage() not working) -> works on clean & build (non-fast)
x compiler warnings: [unchecked], [rawtypes]
* Logger instead of System.out
* Faster build (reuse preprocessed files/tmp)
* Proper dist and tagging


Documentation
-------------
* use public callbacks in case something doesn't work (SecurityNanager)


Event System
------------
x List of Events
x Review Event Systems 
	x Processing
 	x OpenFrameworks
	x ofxUI
x Mouse Events
	x Support for different mouse buttons
* Keyboard Events
	* Notion of Focus for a widget


Class Hierarchy / API
---------------------
* Main Class (PUI)
	* Singleton vs. multiple instances
* Element Base Class / Widget
* Elements/Widgets
	* Handle Events from PUI
	* Data/State/Model
	* Presentation/Rendering/View
	* User Drawing
	* User Event handling
* Event/Callback Pattern
* User controlled drawing
* User Events
* Widget creation (without classes)
* api revision


API Revision
------------
x The matrix might be changed when the draw callback comes
x Widget Constructor: PUI as first Argument
* Revise public API (what should the user see)
* should UIEvents really be public? maybe just protected
* support for labeled widgets
* widget names (e.g. for label, id, auto connect)
* how to best encapsulate base widget state (active, hover, pressed, focus, ...). who needs to see it?
* how to encapsulate special element state (slider value, ...)
* user callbacks
	* which events are defined -> documented, convention onEvent
	* callback arguments (whole object, relevant value, nothing)

* element draw override (disable standard draw)
* Generator Functions for Widgets in PUI. 
* Modular Generator function:  ui.new( "com.martinleopold.pui.widget.Bang", x, y, â€¦ );
* Widgets in own package: com.martinleopold.pui.widget
* PGraphics instead of PApplet? -> Can't use events then.


Main Class
----------
* show/hide ui
* test ui size and position
* test ui drawing independence of sketch transformations
* default settings in a file


Widgets
-------
* constructor possibilities
* widgets with labels
* labels with 3 sizes


Theme System
------------
* add more themes
* widgets need to be able to have a different theme?


Grid System
-----------
* Default Sizes for widgets (based on grid)
* Padding based on grid


Issues
------
* OpenGL: widgedts don't render


Top down
--------
* Base API
* Base Widgets (Slider, Button, Toggle, Label, Divider)
* Callbacks
* Auto Connect
* Theme System
* Grid Layout
